from __future__ import print_function
import sys
import urllib2
import re
import requests

#  aurora via requests for getting CRNs by Jim 
#  ad-astra code by Jim, too. 
#  TODO: add defaultdict for roomCapacities. 
#        make sure list of buildings is exhaustive.
#        implement better checking for when building is not found.
#        beautifulsoup everything.

buildings = ['TIER', 'AGRICULTURE', 'ALLEN', 'ANIMAL SCIENCE', 'ARMES', 'Art Lab', 'Music', 'DUFF ROBLIN', 'EDUCATION', 'ELLIS', 'FLETCHER ARGUE', 'FRANK KENNEDY', 'MACHRAY', 'Distance and On-Line Education', 'HELEN GLASS', 'EITC', 'TBA', 'DRAKE', 'ST. JOHN', 'ST. PAUL' ,'UNIVERSITY COLLEGE', 'RUSSELL']

#PULLED from AD-ASTRA August 2018. May be dated. Not trivial to automatically pull since it uses sessions in cookies
roomCapacities = {
        "ALLEN BUILDING 330" : "36",
	"ARMES 111" : "89",
        "ARMES 201" : "111",
	"ARMES 204" : "192",
	"ARMES 205" : "111",
	"ARMES 208" : "199",
	"DRAKE CENTRE 140" : "60",
	"EDUCATION 224" : "152",
	"EITC E2 105" : "114",
	"EITC E2 110" : "126",
	"EITC E2 125" : "81",
	"EITC E2 130" : "81",
	"EITC E2 150" : "81",
	"EITC E2 155" : "81",
	"EITC E2 160" : "81",
	"EITC E2 164" : "25",
	"EITC E2 165" : "76",
	"EITC E2 304" : "46",
	"EITC E2 310" : "25",
	"EITC E2 320" : "81",
	"EITC E2 350" : "81",
	"EITC E2 351" : "40",
        "EITC E3 270" : "215",
        "FLETCHER ARGUE 100" : "158",
        "FLETCHER ARGUE 200" : "287",
	"HELEN GLASS CENTRE 260" : "108",
	"HELEN GLASS CENTRE 350" : "20",
        "MACHRAY HALL 419" : "30",
        "RUSSELL 214" : "130",
	"ST. JOHN'S COLLEGE 204" : "33",
        "TIER 206" : "169",
        "TIER 306" : "176",
        "TIER 408" : "170",
        "UNIVERSITY COLLEGE 235" : "36",
        "UNIVERSITY COLLEGE 237" : "128",
        "UNIVERSITY COLLEGE 240" : "198",
        "WALLACE 221" : "160",
        "WALLACE 223" : "160",
	"TBA" : "TBA"
}

def foundBldg ( line):
  return any ( [ x in line for x in buildings ] )

def striphtml(data):
  p=re.compile(r'<.*?>')
  return p.sub('', data)

def get_next(page):
   ret = ""
   try:
      ret = striphtml(next(page)).strip()
   except StopIteration:
 	 ret = None
   return ret

roomDict = dict()
# termcode is the aurora standard 6 digit identifier for the term, of the form YYYYXX where
# YYYY is the year and XX is {10,50,90} for {Winter,Summer,Fall}.  2018 FALL is 201890
def get_crn_list(termcode, typecode):
  #copy pasted from the post request generated by AURORA. Only term_in and subj matter. Rest need to be there for the request to validate
  formdata = 'term_in='+str(termcode)+'&sel_subj=dummy&sel_day=dummy&sel_schd=dummy&sel_insm=dummy&sel_camp=dummy&sel_levl=dummy&sel_sess=dummy&sel_instr=dummy&sel_ptrm=dummy&sel_attr=dummy&sel_subj=COMP&sel_crse=&sel_title=&sel_schd=%25&sel_insm=%25&sel_from_cred=&sel_to_cred=&sel_camp=%25&sel_levl=%25&sel_ptrm=%25&sel_dunt_code=&sel_dunt_unit=&sel_instr=%25&sel_attr=%25&begin_hh=0&begin_mi=0&begin_ap=a&end_hh=0&end_mi=0&end_ap=a'

  r = requests.post("https://aurora.umanitoba.ca/banprod/bwckschd.p_get_crse_unsec", data=formdata)


  if (r.status_code != 200):
    print( "Error retriving CRNs: ")
    print (r.text)
    sys.exit()

  crns = []
  x = r.iter_lines()
  for line in x:
    match = re.search('^<th CLASS.*>([^\[\]]+) - (.+) - (.+) - (['+typecode+']..)</a></th>$', line)
    if match:
       crn = match.group(2)
       crns.append(match.group(2))
       #print ("CRN found: "+match.group(2))
       room = 'Not Found'
       n = get_next(x)
       while ( n is not None and not foundBldg( n ) ): ## TODO: should stop if another CRN is found.
          n = get_next(x)
       #print(n)
       if n is not None:
         room = n
         #print(crn, n)
         roomDict[crn] = n

  return crns



if len(sys.argv) != 3:
  print ("")
  print ("Usage: <script> <termcode> <coursetypes>")
  print ("   termcode is of the form YYYYXX where YYYY is the year and XX is {10,50,90} for {Winter,Summer,Fall}.  2018 FALL is 201890")
  print ("   coursetypes is a subset of ABDTK (A=on campus lecture,B=lab,D=distance,T=variants,K=work terms) ")
  print ("")
  sys.exit()

term = sys.argv[1]
typecode = sys.argv[2]
crns = get_crn_list(term,typecode);
for crn in crns:
    url = 'https://aurora.umanitoba.ca/banprod/bwckschd.p_disp_detail_sched?term_in=' + term + '&crn_in=' + crn
    #print(url)
    page = urllib2.urlopen(url)
    out = ''
    for line in page:
      line = striphtml(line)
      #print(line)
      if crn in line:
        print (line.strip())
      if 'Waitlist Seats' in line:
        l1 = get_next(page)
        l2 = get_next(page)
        l3 = get_next(page)
        room = 'Room: '
        if crn in roomDict:
          room += roomDict[crn]
        else:
          room += 'UNKNOWN'
		  
		#append room capacity
        if roomDict[crn] in roomCapacities:
          room += " (seats: "+str(roomCapacities[roomDict[crn]])+")";
        else:
          room += " (seat capacity unknown)"
		  
        print ("\t",out,'Waitlist',l2, room)
        break
      if 'Seats' in line:
        l1 = get_next(page)
        l2 = get_next(page)
        l3 = get_next(page)
        out = 'capacity %s actual %s remaining %s' % (l1,l2,l3)

